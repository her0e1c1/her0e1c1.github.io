
(p"
数式とプログラムの関係

f(n) = f(n-1) + f(n-2)
f(n) = 1 (n = 1)
f(n) = 0 (n = 0)
みたいな記述は、ノードf(n)からの遷移とみることができる.
条件によって、分岐するノードを変更する.
再帰関数では、遷移した後、結果が返ってくるのでそれらをまとめる必要がある。

末尾再帰は、ノードの遷移が常に1つのみで、最後の結果を返すようになってる。
だから、f(a,b)=f(A,B)という式が記述できたら、 ::

   while True:
      A = a
      B = b

というふうにして、末尾再帰に変換できる.

プログラムはifの数だけ分岐する。
現在の状態をNodeとして、条件に合致したNodeへ遷移する.
プログラムは原則終了するので、ノードも終了状態へ遷移する必要がある。
終了するためには、グラフの構造がcycleになってはならない。
経験上、木構造で大丈夫みたい。
関数fの引数を状態にして、そこから次の関数へ遷移する。

f(n) = f(n-1) + X は
f(n, X) = f(n-1, Y) に変形できる
")
