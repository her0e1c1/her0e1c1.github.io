; IMPLEMENT: reverseEachK
; alist = (5 4 3 2 1), k = 3 => (3 4 5 2 1)

(define (reverseK alist k)
  (cond ((< k 0) (error "k is more than or equal to 0"))
        ((= k 0) alist)
        (else
  (let* ((len (length alist))
         (l1 (reverse (take* alist k)))
         (l2 (drop* alist k))
         (l3 (drop* alist (* 2 k))))
    (cond ((= len 0) '())
          ((<= len k) l1)
          ((<= len (* 2 k)) (append l1 l2))
          (else (append l1 l2 l3)))))
  ))

(define (main args)
  (print (reverseK '(5 4 3 2 1) 3))
  (print (reverseK '(5 4 3 2 1) 4))
  (print (reverseK '(5 4 3 2 1) 5))
  (print (reverseK '(5 4 3 2 1) 6))
  (print (reverseK '(5 4 3 2 1) 10))
  (print (reverseK '(5 4 3 2 1) 0))
  (print (reverseK '(5 4 3 2 1) -1))
  0)
