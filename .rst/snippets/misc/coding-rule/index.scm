(p #!Q
====
Code
====

Readable Code
=============


原則
====

* アクセスするのは[1]よりも["name"]の方が読みやすい)タプルは 添字なのでアクセスがわかりにくい)
* リストに違うオブジェクトを混ぜない(リストの要素は同じ型)
* 変数の値は書き換えない
* 変数の値を書き換えるときには明確な理由が必要(状態変更)
* 関数の戻り値は同じ型に揃える
* スコープの小さい変数は短く(一時変数の名前が長すぎるとアルゴリズムがわかりにくくなる)
* 読みやすさを重要視
* A == BのBは定数
* forは回数が明確
* whileは回数が不明
* 無駄な変数宣言を極力避ける
* iを使ったループカウンターは、不等号のバグを埋め込む可能性があるため、あまりよろしくない(eachで書き直す)

* 明らかなコメントはしない
* 必要以上の機能はいらない
* 変数名は、短いコメント
* 関数は極力小さくする
* 簡潔で明確なインターフェイス
* テストコードは、追加＊修正しやすいもの
* タブで内側に行き過ぎない
* 見た目を揃える
* 多機能なものよりも一貫性のあるもの
* 固定か可変
* 一つか複数
* 同じ要素があるかないか
* デザイナからくるhtmlの構造をそのまま使うのが一番の原則
* ifを使ったらelseも必ず書く(少なくとも意識は必要)

大文字と小文字
--------------

まず一般的な規則について。識別子のスタイルには大きく分けて次の３つのパターンがあります。
HowToNameIdentifiers
howToNameIdentifiers
how_to_name_identifiers

変数のプレフィックス
--------------------
スコープのプレフィックス

n ... 普通の整数
ch ... 文字を表す整数
b ... ブーリアン
p ... 一般的なポインタ
pc ... 文字列へのポインタ
pv ... void ポインタ
str ... 文字列（C++ の文字列オブジェクト）
fp ... ファイルポインタ
fd ... ファイルデスクリプタ
h ... ハンドル
wnd ... ウィンドウ
dlg ... ダイアログ ウィンドウ
btn ... ボタンコンポーネント

変数のサフィックス
------------------

Cnt ... カウント（個数）
Idx ... インデックス（添字、項目番号）
Sz ... サイズ
Ctrl ... コントロール
Name ... 何かの名前
Pos ... 位置
Len ... 長さ
Gen ... ジェネレータ
Msg ... ユーザーへのメッセージ

対義語
-------

Begin ⇔ End
Start ⇔ Stop
Top ⇔ Bottom
High ⇔ Low
Big ⇔ Small
Create ⇔ Destroy
Previous ⇔ Next
Allocate ⇔ Free
Attach ⇔ Detach
Get ⇔ Set
Get ⇔ Put
Input ⇔ Output
Show ⇔ Hide
Go ⇔ Back
Up ⇔ Down
Upper ⇔ Lower     
              
              
ブーリアン変数の名前
--------------------

boolの変数名は、どちらが true でどちらが false なのかがはっきりわかるようにつけます。
              
ブーリアンを返す関数は "Is～" という名前にすることが多い

void ShowWindow( bool bShowOrHide );
いかに分割した関数がよい
void ShowWindow();
void HideWindow();
              
クラスにするかインスタンスにするか悩ましい
selfを使うことで, 引数が減らせる.
* 同じような引数を毎回関数に指定している場合
* 関数を変数の中に代入して選択がある場合

Q)
