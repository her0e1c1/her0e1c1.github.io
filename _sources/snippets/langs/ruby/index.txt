
======
 Ruby
======

.. contents::



exit
====


.. code-block:: sh
   

    ruby -e 'exit'
    


.. code-block:: sh
   

    ruby -e 'exit!'
    


.. code-block:: sh
   

    ruby -e 'exec "echo 1"; p "NOT PRINTED"'
    1
    


.. code-block:: sh
   

    ruby -e 'p ENV["USER"].split(":")'
    ["me"]
    


.. code-block:: sh
   

    ruby -e 'p [false, nil].all?'
    false
    


.. code-block:: sh
   

    ruby -e 'def add(a: 1, b: 2) a+b end; puts add a: 3'
    5
    


.. code-block:: sh
   

    ruby -e 'def add(a=1, b=2) a+b end; puts add (a=3)'
    5
    


.. code-block:: sh
   

    ruby -e 'def add(*args) args.inject{|acc, it| acc+it} end; puts (add 1, 2, 3)'
    6
    


.. code-block:: sh
   

    ruby -e 'p true ? "ok" : "no"'
    "ok"
    



struct
======


.. code-block:: sh
   

    ruby -e 'F=Struct.new("F","a","b"); f=F.new(1, 2); p f.a'
    1
    


.. code-block:: sh
   

    ruby -e 'F=Struct.new("F","a","b"); f=F.new(1, 2); p f.b'
    2
    

reduce is alias

.. code-block:: sh
   

    ruby -e 'p [1,2,3].drop(1)'
    [2, 3]
    


.. code-block:: sh
   

    ruby -e 'p [1,2,3].reverse!'
    [3, 2, 1]
    


.. code-block:: sh
   

    ruby -e 'p [1,2,3].reverse'
    [3, 2, 1]
    


.. code-block:: sh
   

    ruby -e 'p [1,1,1,2,2,3].count(1)'
    3
    


.. code-block:: sh
   

    ruby -e 'p ARGV.shift.reverse" hoge'
    -e:1: unterminated string meets end of file
    


.. code-block:: sh
   

    ruby -e 'p [1,2,3].size'
    3
    


.. code-block:: sh
   

    ruby -e '5.times{p rand}'
    0.8607309576165333
    0.8973466015213765
    0.8562805877384259
    0.502581506725447
    0.5410029836246174
    


.. code-block:: sh
   

    ruby -e 'p [1,2,3].inject{|a, b| a+b}'
    6
    


.. code-block:: sh
   

    ruby -e 'p [1,2,3].inject(:+)'
    6
    


.. code-block:: sh
   

    ruby -e 'p [1,2,3][1]'
    2
    


.. code-block:: sh
   

    ruby -e '[1,2,3].permutation{|a| p a}'
    [1, 2, 3]
    [1, 3, 2]
    [2, 1, 3]
    [2, 3, 1]
    [3, 1, 2]
    [3, 2, 1]
    


.. code-block:: sh
   

    ruby -e 'p [1,1,1,2,2,3].uniq'
    [1, 2, 3]
    


.. code-block:: sh
   

    ruby -e 'puts [1,2,3].map{|i| i+1}'
    2
    3
    4
    


.. code-block:: sh
   

    ruby -e 'p [1,2,3].first'
    1
    


.. code-block:: sh
   

    ruby -e 'a=[1,2,3]; a.push(4); p a'
    [1, 2, 3, 4]
    


.. code-block:: sh
   

    ruby -e 'puts Dir.glob("*")'
    index.sh
    class.rb
    index.rst
    include-ruby.scm
    index.scm
    


.. code-block:: sh
   

    ruby -e 'puts "hello world"'
    hello world
    


.. code-block:: sh
   

    ruby -e 'p "hello world"'
    "hello world"
    


.. code-block:: sh
   

    ruby -e '"hello world".display'
    hello world


.. code-block:: sh
   

    ruby -e 'p "abcde"[0]'
    "a"
    


.. code-block:: sh
   

    ruby -e 'p "abcde"[1,3]'
    "bcd"
    


.. code-block:: sh
   

    ruby -e 'p "abcde"[/awc/]'
    nil
    


.. code-block:: sh
   

    ruby -e '3.times{puts "hello"}'
    hello
    hello
    hello
    


.. code-block:: sh
   

    ruby -e 'p [1,2,3,4,5].select{|i| i.even? }'
    [2, 4]
    


.. code-block:: sh
   

    ruby -e 'p [[1,2,3], 4, [5, [6], 7]].flatten'
    [1, 2, 3, 4, 5, 6, 7]
    


.. code-block:: sh
   

    ruby -e '[1,2,3].each{|i| puts i}'
    1
    2
    3
    


.. code-block:: sh
   

    ruby -e 'puts [1,2,3].include? 1'
    true
    


.. code-block:: sh
   

    ruby -e '("a".."c").to_a.product(["txt", "csv"]).each{|(i, j)| puts i+"."+j}'
    a.txt
    a.csv
    b.txt
    b.csv
    c.txt
    c.csv
    


.. code-block:: sh
   

    $ ruby -e 'p ARGV.shift.length' 1234567890
    10
    

class
=====


.. code-block:: rb
   

    class Human
      def initialize(name="")
        @name = name
      end
      attr_accessor :name
    end
    
    puts (Human.new "Bob").name
    
 
class.rb => 
::

    Bob
    

