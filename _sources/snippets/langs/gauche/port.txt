
====
port
====

.. contents::
    :depth: 2

3文字読む

.. code-block:: sh
   

    $ echo hoge |s '(p (read-char) (read-char) (read-char))'
    hog
    

2行読む

.. code-block:: sh
   

    $ ls|s '(p (read-line) (read-line))'
    basic.rstchar.rst
    

port名

.. code-block:: sh
   

    $ s '(port-name (current-input-port))'
    (standard input)
    



port type
=========

file, string, proc

.. code-block:: sh
   

    $ s '(port-type (current-input-port))'
    file
    



isatty
======


.. code-block:: sh
   

    $ s '(sys-isatty (standard-input-port))'
    #t
    

integer

.. code-block:: sh
   

    $ s '(sys-isatty 0)'
    #t
    

use pipe. so this is not a tty

.. code-block:: sh
   

    $ ls | s '(sys-isatty (standard-input-port))'
    #f
    


.. code-block:: sh
   

    $ ls | s '(read-line)'
    basic.rst
    


.. code-block:: sh
   

    $ s '(sys-isatty (standard-output-port))' |cat
    #f
    

.. todo:: fix.

.. code-block:: sh
   

    $ s '(sys-isatty (standard-output-port))'
    #f
    


.. code-block:: sh
   

    $ s '(sys-isatty (standard-error-port))'
    #f
    


.. code-block:: sh
   

    $ s '(sys-ttyname 1)'
    #f
    


.. code-block:: sh
   

    $ s '(sys-ttyname 2)'
    #f
    


.. code-block:: sh
   

    $ s '(standard-input-port)'
    #<iport (standard input) 0x717d80>
    


.. code-block:: sh
   

    $ s '(eq? (current-input-port) (standard-input-port))'
    #t
    


.. code-block:: sh
   

    $ s '(port-file-number (current-input-port))'
    0
    


.. code-block:: sh
   

    $ s '(port-file-number (current-output-port))'
    1
    


.. code-block:: sh
   

    $ s '(port-file-number (current-error-port))'
    2
    


.. code-block:: sh
   

    $ s '(port-file-number (standard-input-port))'
    0
    


.. code-block:: sh
   

    $ s '(port-file-number (standard-output-port))'
    1
    


.. code-block:: sh
   

    $ s '(port-file-number (standard-error-port))'
    2
    


.. code-block:: sh
   

    $ s '(sys-ttyname 0)'
    /dev/pts/7
    


.. code-block:: sh
   

    $ ls|s '(sys-ttyname 0)'
    #f
    



string port
===========


.. code-block:: sh
   

    $ s '(port-type (open-input-string "test"))'
    string
    


.. code-block:: sh
   

    $ s '(port-file-number (open-input-string "test"))'
    #f
    

string portは、文字列を蓄積させていくことができる(buffに溜まる感じ)

.. code-block:: sh
   

    $ s '(begin (define a (open-output-string)) (format a "test") (format a "HOGE") (get-output-string a))'
    testHOGE
    


.. code-block:: sh
   

    $ echo HOGE | s '(port-for-each print read-char)'
    H
    O
    G
    E
    
    
    

逆順

.. code-block:: sh
   

    $ echo HOGE | s "(port-fold cons '() read-char)"
    (
     E G O H)
    


.. code-block:: sh
   

    $ gosh -e '(print (begin (call-with-output-string (^o (write "HOGE" o) (write "FOO" o)))))' -Eexit
    "HOGE""FOO"
    



call-with-*-file
================


.. code-block:: sh
   

    $ gosh -e '(print (begin (call-with-output-file "t" (^o (write "this is a test" o)))))' -Eexit
    #<undef>
    


.. code-block:: sh
   

    $ gosh -e '(print (begin (call-with-input-file "t" port->string)))' -Eexit
    "this is a test"
    


.. code-block:: sh
   

    $ gosh -e '(print (begin (call-with-input-file "t" port->string-list)))' -Eexit
    ("this is a test")
    


.. code-block:: sh
   

    $ gosh -e '(print (begin (call-with-input-file "t" (^i (p (read-char i) (read-char i))))))' -Eexit
    "t
    #<undef>
    

"this is a test"


with-*-file
===========

you don't take a port object as argument but change a current port instead

.. code-block:: sh
   

    $ gosh -e '(print (begin (with-output-to-file "t" (^ () (p "this is a test (with-output-to-file)")))))' -Eexit
    #<undef>
    


.. code-block:: sh
   

    $ gosh -e '(print (begin (with-input-from-file "t" (^ () (port-for-each p read-line)))))' -Eexit
    this is a test (with-output-to-file)
    #<undef>
    



process
=======


.. code-block:: sh
   

    $ gosh -e '(print (begin (process-output->string "ls")))' -Eexit
    basic.rst char.rst class.rst file.rst fp.rst gauche2c hash.rst include-gauche.scm index.rst index.scm index.sh install.rst lazy.rst macro.rst module.rst peg.rst port.rst regex.rst s stream.rst string.rst syntax.rst sys.rst t
    


.. code-block:: sh
   

    $ gosh -e '(print (begin (sys-system "ls")))' -Eexit
    basic.rst
    char.rst
    class.rst
    file.rst
    fp.rst
    gauche2c
    hash.rst
    include-gauche.scm
    index.rst
    index.scm
    index.sh
    install.rst
    lazy.rst
    macro.rst
    module.rst
    peg.rst
    port.rst
    regex.rst
    s
    stream.rst
    string.rst
    syntax.rst
    sys.rst
    t
    0
    



flush
=====


.. code-block:: sh
   

    $ gosh -e '(print (begin (write "hoge" (current-output-port)) (/ 1 0)))' -Eexit
    gosh: "error": attempt to calculate a division by zero
    "hoge"


.. code-block:: sh
   

    $ gosh -e '(print (begin (write "hoge" (current-output-port)) (flush) (/ 1 0)))' -Eexit
    "hoge"gosh: "error": attempt to calculate a division by zero
    

