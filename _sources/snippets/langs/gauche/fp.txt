
==
fp
==

.. contents::
    :depth: 2



filter
======

matchした要素だけ取得


pairtial
========

f g => (f (g x))

.. code-block:: sh
   

    $ gosh -e '(print (begin ((compose not zero?) 0)))' -Eexit
    #f
    


.. code-block:: sh
   

    $ gosh -e '(print (begin ((compose not zero?) 1)))' -Eexit
    #t
    


.. code-block:: sh
   

    $ gosh -e '(print (begin ((pa$ not zero?) 1)))' -Eexit
    gosh: "error": wrong number of arguments for #<subr not> (required 1, got 2)
    


.. code-block:: sh
   

    $ gosh -e '(print (begin ((pa$ flip map) (iota 10) print)))' -Eexit
    0
    1
    2
    3
    4
    5
    6
    7
    8
    9
    (#<undef> #<undef> #<undef> #<undef> #<undef> #<undef> #<undef> #<undef> #<undef> #<undef>)
    



foldl
=====

bに結果が溜まる

.. code-block:: sh
   

    $ gosh -e '(print (begin (fold (^ (a b) (cons a b)) '\''() (i 10))))' -Eexit
    (9 8 7 6 5 4 3 2 1 0)
    



composite function
==================


.. code-block:: sh
   

    $ gosh -e '(print (begin ($ p $ + 1 2 3)))' -Eexit
    6
    #<undef>
    

1つ目の引数として取った手続きを引数無しで実行し、
返ってきた値(多値)を引数として2つ目の引数として取った手続きを実行します。

.. code-block:: sh
   

    $ gosh -e '(print (begin (call-with-values (lambda () (values 2 3)) (lambda (x y) (* x y)))))' -Eexit
    6
    

