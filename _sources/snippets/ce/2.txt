=======
 Misc
======= 

Get a size of an array


.. code-block:: sh
   

    $ ce '#define SIZE(x) (sizeof(x) / sizeof(x[0]))
     int a[] = {1,2,3}; p("%d", SIZE(a));' 
    3

argc


.. code-block:: sh
   

    $ ce 'p("%d", argc);' 1 2 3 4 5
    6

argv is a list of argument strings. they are stored in memory. the last item is NULL
you can also say like char** is [String]


.. code-block:: sh
   

    $ ce 'while(*argv){p("%s ", *argv); argv++;}' 1 2 3
    /tmp/tmp.VcszemUZ 1 2 3 

Increment pointer. ++ and +=1 are no different. btw argv[0] is exec path.


.. code-block:: sh
   

    $ ce 'argv += 1; p("%s", *argv);' first
    first

Get the last item


.. code-block:: sh
   

    $ ce 'p("%s", argv[argc - 1]);' first secomd last
    last

Get values of evriron


.. code-block:: sh
   

    $ ce 'char**e=environ;while(*e){if(!strcmp(*e, "USER=me"))p("%s", *e); e++;}' 
    USER=me

if adding to the length of the string, you always refer ''


.. code-block:: sh
   

    $ ce 'char *s="abc", *t; t = s + strlen(s); if(!*t) p("NULL");' 
    NULL



struct
======



.. code-block:: sh
   

    $ ce 'typedef struct {char name[64];}S; S s; strcpy(s.name, "Bob"); p("%s", s.name);' 
    Bob



.. code-block:: sh
   

    $ ce 'typedef struct {unsigned bool: 1;}Bool; Bool b; b.bool=0; p("%d", b.bool);' 
    0



.. code-block:: sh
   

    $ ce 'typedef struct {unsigned bool: 1;}Bool; Bool b; b.bool=1; p("%d", b.bool);' 
    1



.. code-block:: sh
   

    $ ce 'typedef struct {unsigned bool: 1;}Bool; Bool b; b.bool=2; p("%d", b.bool);' 
    <stdin>:38:59: warning: implicit truncation from 'int' to bitfield changes value from 2 to 0 [-Wbitfield-constant-conversion]
        typedef struct {unsigned bool: 1;}Bool; Bool b; b.bool=2; p("%d", b.bool);
                                                              ^~
    1 warning generated.
    0

