
===============
graph
===============

.. contents::
    :depth: 2



a-star.scm
==============================

A*は、ダイクストラの改良


count-node.scm
==========================================



path-to.scm
=================================



return true if src and dst are connected
------------------------------------------------------------------------------------------------------------------------

if you want to get the shortest path, use BFS not DFS

.. code-block:: cpp
   

    #include <myutils.h>
    class Graph {
    public:
      vector<vector<int>> g;
      int N;
      Graph(vector<int> x, vector<int> y, int N) {
        this->N = N;
        g.resize(N);
        for(int i = 0; i < x.size(); i++) {
          int xi = x[i];
          int yi = y[i];
          g[xi].push_back(yi);
        }
      }
      bool search(int src, int dst){
        vector<int> q;
        q.push_back(src);
        vector<bool> visited(N, false);
        while (!q.empty()) {
          int n = q.back();
          q.pop_back();
          visited[n] = true;
          for (int i = 0; i < g[n].size(); i++) {
            int next = g[n][i];
            if (next == dst)
              return true;
            if (!visited[next]) {
              q.push_back(next);
            }
          }
        }
        return false;
      }
    };
    int main(){
      Graph g({0, 1, 2, 3, 3, 4, 5},
              {1, 3, 1, 0, 5, 3, 2},
              6);
      cout << g.search(0, 2) << endl;
      cout << g.search(0, 4) << endl;
    }

.. code-block:: sh
   

    <stdin>:2:7: error: redefinition of 'Graph'
    class Graph {
          ^
    /home/me/lib/cpp/myutils.h:118:7: note: previous definition is here
    class Graph {
          ^
    <stdin>:39:13: error: no member named 'search' in 'Graph'
      cout << g.search(0, 2) << endl;
              ~ ^
    <stdin>:40:13: error: no member named 'search' in 'Graph'
      cout << g.search(0, 4) << endl;
              ~ ^
    3 errors generated.
    



get a path from src to dst in a graph
---------------------------------------------------------------------------------------------------------------

最短経路を、一つ前のノードをリスト(previous)で持つのは、読みにくい。
クラスを用意して、親ノードを保持するデータ構造の方が、読みやすい。

.. code-block:: cpp
   

    #include <myutils.h>
    class Graph {
    public:
      vector<vector<int>> g;
      int N;
      Graph(vector<int> x, vector<int> y, int N) {
        this->N = N;
        g.resize(N);
        for(int i = 0; i < x.size(); i++) {
          int xi = x[i];
          int yi = y[i];
          g[xi].push_back(yi);
        }
      }
      vector<int> search(int src, int dst){
        vector<int> q;
        q.push_back(src);
        vector<bool> visited(N, false);
        vector<int> previous(N, -1);
        while (!q.empty()) {
          int n = q.back();
          q.pop_back();
          visited[n] = true;
          for (int i = 0; i < g[n].size(); i++) {
            int next = g[n][i];
            if (!visited[next]) {
              q.push_back(next);
              previous[next] = n;
            }
            if (next == dst) {
              vector<int>p(1, dst);
              int i = previous[dst];
              while (i != -1) {
                p.push_back(i);
                i = previous[i];
              }
              return p;
            }
          }
        }
        return vector<int>();
      }
    };
    int main(){
      Graph g({0, 1, 2, 3, 3, 4, 5},
              {1, 3, 1, 0, 5, 3, 2},
              6);
      PE(g.search(0, 2));  
      PE(g.search(0, 4));
    }

.. code-block:: sh
   

    <stdin>:2:7: error: redefinition of 'Graph'
    class Graph {
          ^
    /home/me/lib/cpp/myutils.h:118:7: note: previous definition is here
    class Graph {
          ^
    <stdin>:48:8: error: no member named 'search' in 'Graph'
      PE(g.search(0, 2));  
         ~ ^
    /home/me/lib/cpp/myutils.h:65:26: note: expanded from macro 'PE'
      {for (int i = 0 ; i < (x).size(); i++){       \
                             ^
    <stdin>:48:8: error: no member named 'search' in 'Graph'
      PE(g.search(0, 2));  
         ~ ^
    /home/me/lib/cpp/myutils.h:66:14: note: expanded from macro 'PE'
        cout << (x)[i] << ", "; \
                 ^
    <stdin>:49:8: error: no member named 'search' in 'Graph'
      PE(g.search(0, 4));
         ~ ^
    /home/me/lib/cpp/myutils.h:65:26: note: expanded from macro 'PE'
      {for (int i = 0 ; i < (x).size(); i++){       \
                             ^
    <stdin>:49:8: error: no member named 'search' in 'Graph'
      PE(g.search(0, 4));
         ~ ^
    /home/me/lib/cpp/myutils.h:66:14: note: expanded from macro 'PE'
        cout << (x)[i] << ", "; \
                 ^
    5 errors generated.
    



topological-sort.scm
============================================================

DFSを実行し、行き先がなくなったものから順に、リストに格納

.. warning::

    you can't sort a cyclic graph!!!


.. code-block:: cpp
   

    #include <myutils.h>
    vector<int> sort(Graph &g) {
     vector<bool> visited(g.N, false);
     vector<int> sorted;
     function <void(int)>dfs = [&](int node) {
      visited[node] = true;
      for(int next: g.E[node])
        if (!visited[next])
          dfs(next);
      sorted.push_back(node);
     };
     for (int node: g.nodes())
      if (!visited[node])
       dfs(node);
     return sorted;
    }
    int main(){
      Graph g({0, 2, 3, 3, 4, 5},
              {1, 1, 0, 5, 3, 2},
              6);
      P(g);
      vector<int> ret = sort(g);
      PE(ret);
    }

.. code-block:: sh
   

    g = 0 => 1, 
    1 => 
    2 => 1, 
    3 => 0, 5, 
    4 => 3, 
    5 => 2, 
    
    1, 0, 2, 5, 3, 4, 
    

