
==========================================
design-pattern
==========================================

.. contents::
    :depth: 2



composite.scm
=======================================


Component * --<> 1 Composite
Component + operation() <- Leaf 
Component + operation() <- Composite

Composite Patternでは、箱をその中身と同様に扱う。
今回はファイルシステムを例にするため,
箱がDirectoryで、中身がFileとする。(Directoryは箱と中身の両方の役割を担う)

このパターンが有効なのは、再帰構造をしたデータである。
TreeのNodeがDirectoryで、LeafがFileとなる。

このパターンで必要となるものは
親子共通メソッドとCompositeにインスタンスを格納する容器

木構造の例
ツリーの関係(Node/Leaf)
DOM(html)
Parent/Children

以下のようなクラス
   class Node:
       children = []


.. code-block:: java
   

    import java.util.*;
    interface EntryInterface {
     public String name = "";
     public void remove();
    }
    class Directory implements EntryInterface {
     public String name;
     Directory(String name) { this.name = name; }
     ArrayList<EntryInterface> entries = new ArrayList<>();
     public void add(EntryInterface e) { entries.add(e); }
     public void remove() {
      for (EntryInterface e: entries) { e.remove(); }
      System.out.printf("Remove a %s directory\n", name);
     }
    }
    class File implements EntryInterface {
     public String name;
     File(String name) { this.name = name; }
     public void remove() { System.out.printf("Remove a %s file\n", name); }
    }
    public class Main {
     public static void main (String[] args) {
      Directory root = new Directory("root");
      for (int i: Arrays.asList(1,2,3,4,5))
       root.add(new File(String.format("text%d.txt", i)));
    
      Directory sub = new Directory("sub dir");
      for (int i: Arrays.asList(1,2,3,4,5))
       sub.add(new File(String.format("music%d.mp3", i)));
      root.add(sub);
    
      System.out.println("Call a remove method of a root directory...");
      root.remove();
     }
    }

.. code-block:: sh
   

    Call a remove method of a root directory...
    Remove a text1.txt file
    Remove a text2.txt file
    Remove a text3.txt file
    Remove a text4.txt file
    Remove a text5.txt file
    Remove a music1.mp3 file
    Remove a music2.mp3 file
    Remove a music3.mp3 file
    Remove a music4.mp3 file
    Remove a music5.mp3 file
    Remove a sub dir directory
    Remove a root directory
    



iterator.scm
====================================


# Aggregate +iterator() <- ConcreteAggregate
# Iterator +next(), hasNext() <- ConcreteIterator
# Aggregate -- create --> ConcreteAggregate
# ConcreteAggregate --<> ConcreteIterator
# オブジェクトを繰り返して取得する場合の実装方法


.. code-block:: java
   

    import java.util.*;
    public class Main {
     public static void main (String[] args) {
      Pack p = new Pack();
      p.add(new Candy(100));
      p.add(new Candy(200));
      p.add(new Candy(300));
      Iter i = p.iter();
      while (i.hasNext()) {
       Candy c = i.next();
       System.out.println(c);
      }
     }
    }
    
    class Candy {
     private int price;
     Candy(int price) { this.price = price; }
     @Override
     public String toString() { return String.format("candy(%d)", price); };
    }
    
    class Pack {
     private LinkedList<Candy> pack = new LinkedList<Candy>();
     public void add(Candy c) { pack.add(c);}
     public Iter iter() { return new Iter(this.pack); }
    }
    
    class Iter {
     private LinkedList<Candy> pack;
     Iter(LinkedList<Candy> p) { this.pack = p; }
     Candy next() { return this.pack.pop(); }
     boolean hasNext() { return this.pack.size() == 0 ? false : true; }
    }

.. code-block:: sh
   

    candy(100)
    candy(200)
    candy(300)
    



state.scm
===========================


stateパターンは状態によって、呼び出すメソッドを変更させる

context <>-- state
context +method1
state +method1 <- state1
state +method1 <- state2


.. code-block:: java
   

    interface State {
     public void hello();
    }
    class Fine implements State {
     public void hello() { System.out.println("Hello I'm file :D"); };
    }
    class Angry implements State {
     public void hello() { System.out.println("):"); };
    }
    class Human {
     private State state;
     Human(State s) { state = s; }
     public void hello() { state.hello(); };
    }
    class Main {
     public static void main (String[] args) {
      (new Human(new Fine())).hello();
      (new Human(new Angry())).hello();
     }
    }

.. code-block:: sh
   

    Hello I'm file :D
    ):
    

