
============
list
============

.. contents::
    :depth: 2



AddEachDigitOf2Lists.scm
========================================================================

(1 1 1) (2 3 4) => (3 4 5)のように、左側を一桁とした足し算

.. code-block:: gosh
   

    ; point: 空かそうでない場合をnext-Xとしておく
    (define (add list1 list2)
      (let loop ((a list1) (b list2) (carry 0))
        (let* ((sum (+ (if (null? a) 0 (car a))
                       (if (null? b) 0 (car b))
                       carry))
               ; 0 <= sum <= 9 + 9 + 1 = 19
               (digit (mod sum 10))
               (next-carry (if (>= sum 10) 1 0))
               (next-a (if (null? a) '() (cdr a)))
               (next-b (if (null? b) '() (cdr b))))
          (cond ((and (null? a) (null? b))
                 (if (= carry 1) '(1) '()))
                (else (cons digit (loop next-a next-b next-carry)))))))
    
    (define (main args)
      (print (add '(1 2 3 4 5) '(5 4 3 2 1)))
      (print (add '(7 7 7) '(3 2 2)))
      (print (add '(7 7 7) '(3)))
      (print (add '() '()))
      (print (add '() '(1 2 3)))
      0)

.. code-block:: sh
   

    



anagram.scm
=================================

anagramは、ある文字列の文字の順番を入れ替えて作成した別の文字列を作る
Statue of Liberty = built to stay free
.. todo:: 文字列の配列を受け取り、anagram同士が隣に並ぶようにソート

.. code-block:: c
   

    #include <stdio.h>
    
    int anagram(char* p, char* q) {
      // 256文字までと仮定
      char counter[256] = {0};
      int pl, ql;
      pl = ql = 0;
    
      // pにおけるそれぞれの文字数をカウント
      // Also get the length of p here
      for (char* it = p; *it; it++) {
        char c = *it - 'a';
        counter[c]++;
        pl++;
      }
    
      // qで上で取得したカウンタを減算
      // 別文字が存在、あるいは
      for (char* it = q; *it; it++) {
        char c = *it - 'a';
        counter[c]--;
        ql++;
        if (counter[c] < 0)
          return 0;
      }
    
      // p, qの長さが等しいも満たす必要あり
      if (pl == ql)
        return 1;
      return 0;
    }
    
    int main() {
      printf("%d\n", anagram("abacb", "aacbb"));  // 1
      printf("%d\n", anagram("abacb", "abcde"));  // 0
      printf("%d\n", anagram("abacb", "aabb"));   // 0
      printf("%d\n", anagram("abacb", "aabbcc")); // 0
    }

.. code-block:: sh
   

    <stdin>:12:20: error: use of undeclared identifier 'a'
        char c = *it - a;
                       ^
    <stdin>:20:20: error: use of undeclared identifier 'a'
        char c = *it - a;
                       ^
    2 errors generated.
    


.. code-block:: gosh
   

    (define (anagram? p q)
      (equal? (sort p) (sort q)))
    (print (anagram? "ababc" "cbbaa"))
    (print (anagram? "ababc" "abcde"))
    (print (anagram? "ababc" "cbbaaa"))
    (print (anagram? "ababc" "caaa"))

.. code-block:: sh
   

    #t
    #f
    #f
    #f
    



gfg.scm
=====================



yates-shuffle.scm
===================================================

末尾と取り替えるインデックスを決めて、それと末尾を入れ替え

.. code-block:: c
   

    #include <myc.h>
    void swap(int *x, int *y) { int t=*x; *x=*y; *y=t; }
    void shuffle(int *a, int size) {
     for (int i = size - 1; i >= 1; i--) {
       int j = rand() % (i + 1);
       assert (0 <= j && j <= i);
       swap(&a[i], &a[j]);
     }
    }
    int main() {
     srand(time(NULL));
     int a[] = {1,2,3,4,5};
     shuffle(a, SIZE(a));
     PVI(a);
    }

.. code-block:: sh
   

    2, 5, 1, 3, 4, 

