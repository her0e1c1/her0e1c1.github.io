
===========================
exception
===========================

.. contents::
    :depth: 2



error.scm
===========================



index.scm
===========================


.. code-block:: sh
   

    $ perl -E '0 || die qq/エラー : $!/'
    エラー :  at -e line 1.
    



guard
---------------


.. code-block:: sh
   

    $ s '(guard (var cond) cddr)' 
    *** ERROR: Compile Error: malformed guard clause cond
    
    Stack Trace:
    _______________________________________
      0  (eval `(main+ (list ,@(cdr rest)) ,(car rest)) '())
            At line 125 of "/home/me/github/onelinerForGauche/main.scm"
    


.. code-block:: sh
   

    $ s '(guard (exc) 1)' 
    1
    


.. code-block:: sh
   

    $ s '(guard (exc) (/ 1 0))' 
    *** ERROR: attempt to calculate a division by zero
    Stack Trace:
    _______________________________________
      0  (/ 1 0)
            At line 1 of "(input string port)"
      1  (with-error-handler (lambda (e) (let ((exc e)) (%guard-rec exc e))
            [unknown location]
      2  (print-string (|-->| (undefined) list (guard (exc) (/ 1 0))))
            [unknown location]
      3  (eval `(main+ (list ,@(cdr rest)) ,(car rest)) '())
            At line 125 of "/home/me/github/onelinerForGauche/main.scm"
    


.. code-block:: sh
   

    $ s '(guard (exc (else 0)) (/ 1 0))' 
    0
    

bodyがエラーを起こしても、必ずCLEAN-UP-FORMSが呼ばれる(ただし、errorは無視されない!)

.. code-block:: sh
   

    $ ee '(unwind-protect (/ 1 0) (print "ERROR!"))' 
    Arithmetic error
    
    "ERROR!"
    


.. code-block:: sh
   

    $ ee '(unwind-protect (/ 1 1) (print "always print this"))' 
    
    "always print this"
    1

Catch errors and return nil

.. code-block:: sh
   

    $ ee '(ignore-errors (/ 1 0))' 
    nil

Return the last expression

.. code-block:: sh
   

    $ ee '(ignore-errors (/ 10 1) 2 nil 1)' 
    1

unwind-protectとignore-errorsを使い、エラーをキャッチして処理を続ける(失敗した場合はnil)

.. code-block:: sh
   

    $ ee '(ignore-errors (unwind-protect (/ 1 0) (print "always print this")))' 
    
    "always print this"
    nil

char*型は不可

.. code-block:: cpp
   

    #include "myutils.h"
    int main () {
      try {
        throw "error";
      } catch (const char* msg) {
        cout << msg;
      }
    }

.. code-block:: sh
   

    error


.. code-block:: cpp
   

    #include "myutils.h"
    int main () {
      try {
        throw string("error 1");
      } catch (string msg){
        cout << msg;
      }
      try {
        throw new string("error 2");
      } catch (string* msg){
        cout << *msg;
      }
    }

.. code-block:: sh
   

    error 1error 2


.. code-block:: cpp
   

    #include "myutils.h"
    int main () {
      try {
        throw "ANY";
      } catch (...){
        cout << "error";
      }
    }

.. code-block:: sh
   

    error


.. code-block:: node
   

    try{
        throw null;
    } catch (e) {
        if (e === null)
            console.log("NULL!");
    }

.. code-block:: sh
   

    NULL!
    

