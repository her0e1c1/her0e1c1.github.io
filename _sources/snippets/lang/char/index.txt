
====
char
====

.. contents::
    :depth: 2



init.scm
========


.. code-block:: sh
   

    $ cpe 'string s; s=char('\''A'\'' + 1); P(s)' 
    s = B
    


.. code-block:: sh
   

    $ cpe 'string s; s='\''A'\''+1; P(s)' 
    s = B
    


.. warning::

    cannot declare with char


.. code-block:: sh
   

    $ cpe 'string s='\''A'\''+1;' 
    <stdin>:45:12: error: no viable conversion from 'int' to 'string' (aka 'basic_string<char, char_traits<char>, allocator<char> >')
        string s='A'+1;
               ^ ~~~~~
    /usr/include/c++/v1/string:1186:5: note: candidate constructor not viable: no known conversion from 'int' to 'const std::__1::basic_string<char> &' for 1st argument
        basic_string(const basic_string& __str);
        ^
    /usr/include/c++/v1/string:1190:5: note: candidate constructor not viable: no known conversion from 'int' to 'std::__1::basic_string<char> &&' for 1st argument
        basic_string(basic_string&& __str)
        ^
    /usr/include/c++/v1/string:1195:31: note: candidate constructor not viable: no known conversion from 'int' to 'const value_type *' (aka 'const char *') for 1st argument
        _LIBCPP_INLINE_VISIBILITY basic_string(const value_type* __s);
                                  ^
    /usr/include/c++/v1/string:1216:5: note: candidate constructor not viable: no known conversion from 'int' to 'initializer_list<value_type>' for 1st argument
        basic_string(initializer_list<value_type> __il);
        ^
    1 error generated.
    


.. code-block:: sh
   

    $ s '(list->string (to #\あ #\ん))' 
    あぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎわゐゑをん
    


.. code-block:: sh
   

    $ s '(char-set->list #[a-z])' 
    (z y x w v u t s r q p o n m l k j i h g f e d c b a)
    


.. code-block:: sh
   

    $ s '(char-set->list #[あ-ん])' 
    (ん を ゑ ゐ わ ゎ ろ れ る り ら よ ょ ゆ ゅ や ゃ も め む み ま ぽ ぼ ほ ぺ べ へ ぷ ぶ ふ ぴ び ひ ぱ ば は の ね ぬ に な ど と で て づ つ っ ぢ ち だ た ぞ そ ぜ せ ず す じ し ざ さ ご こ げ け ぐ く ぎ き が か お ぉ え ぇ う ぅ い ぃ あ)
    

#[^a-b]

.. code-block:: sh
   

    $ s '(char-set-complement #[ab])' 
    #[\u0000-`c-\u007f\u0080-\U00ffffff]
    



char
====

#\一文字 はchar

.. code-block:: sh
   

    $ s '(char=? #\x #\a)' 
    #f
    


.. warning::

    結果違う


.. code-block:: sh
   

    $ s '(list->string '\''(#\a #\b))' 
    ab
    


.. code-block:: sh
   

    $ s '(x->string '\''(#\a #\b))' 
    (a b)
    


.. code-block:: sh
   

    $ s '#\ሴ' 
    ሴ
    



ord.scm
=======


.. code-block:: sh
   

    $ python -c "print(ord('a'))"
    97
    


.. code-block:: sh
   

    $ perl -E 'say ord("a")'
    97
    



width.scm
=========

