
==================
number
==================

.. contents::
    :depth: 2



bin.scm
=====================


.. code-block:: sh
   

    $ perl -E 'say 0b1000'
    8
    


.. code-block:: sh
   

    $ s '15' 
    15
    



cmp.scm
=====================

you don't need and operator

.. code-block:: sh
   

    $ py '1 < 2 < 3 <= 3 < 4 < 5' 
    



equal.scm
===========================


.. code-block:: sh
   

    $ ghc -e '(1::Int) == (1::Integer)' 
    
    <interactive>:1:14:
        Couldn't match expected type ‘Int’ with actual type ‘Integer’
        In the second argument of ‘(==)’, namely ‘(1 :: Integer)’
        In the expression: (1 :: Int) == (1 :: Integer)
        In an equation for ‘it’: it = (1 :: Int) == (1 :: Integer)
    

-eq, -gt, are operators for number. NOT STRING!

.. warning::

    [ and ] need spaces around each of them


.. code-block:: sh
   

    $ sh -c '[ 1 -eq 1 ] && echo '\''true'\''' 
    true
    


.. code-block:: sh
   

    $ sh -c '[ 2 -gt 1 ] && echo '\''true'\''' 
    true
    


.. code-block:: sh
   

    $ sh -c '[ 2 -ge 2 ] && echo '\''true'\''' 
    true
    


.. code-block:: sh
   

    $ sh -c '[ 1 -lt 2 ] && echo '\''true'\''' 
    true
    


.. code-block:: sh
   

    $ sh -c '[ 2 -le 2 ] && echo '\''true'\''' 
    true
    


.. code-block:: sh
   

    $ sh -c '[ '\''hoge'\'' -eq '\''hoge'\'' ] && echo '\''true'\''' 
    [: hoge: bad number
    


.. warning::

    Not == operator


.. code-block:: sh
   

    $ sh -c '[ '\''str'\'' = '\''str'\'' ]     && echo '\''true'\''' 
    true
    


.. code-block:: sh
   

    $ sh -c '[ '\''str'\'' != '\''string'\'' ] && echo '\''true'\''' 
    true
    


.. code-block:: sh
   

    $ sh -c '[ 1 = 1 ]     && echo '\''true'\''' 
    true
    

Not quoted string

.. code-block:: sh
   

    $ sh -c '[ hoge = hoge ]     && echo '\''true'\''' 
    true
    



eqv?
------------

シンボルと数値

.. code-block:: sh
   

    $ s '(eqv? '\''1 1)' 
    #t
    



=
---

数値同士の場合は=

.. code-block:: sh
   

    $ s '(= 1 1.0)' 
    #t
    



float.scm
===========================



hex.scm
=====================


.. code-block:: sh
   

    $ s '65535' 
    65535
    



inf.scm
=====================


.. warning::

    Not an error


.. code-block:: sh
   

    $ ne 'a = 1/0;' 
    


.. code-block:: sh
   

    $ s '(> +inf.0 1 0 -1 -inf.0)' 
    #t
    



int.scm
=====================



nan.scm
=====================


.. code-block:: sh
   

    $ ne 'NaN !== NaN' 
    



oct.scm
=====================


.. code-block:: sh
   

    $ s '511' 
    511
    



pow.scm
=====================

10 ^ 3  ; (expt 10 3)

.. code-block:: sh
   

    $ s '1000' 
    1000
    


.. code-block:: sh
   

    $ s '(expt 2 3)' 
    8
    


.. code-block:: sh
   

    $ py 'P(2**3)' 
    8
    



toInt.scm
===========================


.. code-block:: sh
   

    $ ghc -e 'read "10"' 
    <interactive>: Prelude.read: no parse
    


.. code-block:: sh
   

    $ ghc -e 'reads "10"' 
    []
    

型を指定する必要あり

.. code-block:: sh
   

    $ ghc -e 'reads "10" :: [(Int, String)]' 
    [(10,"")]
    


.. code-block:: sh
   

    $ ghc -e 'print(read "10" :: Integer)'
    10
    

文字列を数値に変換する

.. code-block:: sh
   

    $ ne 'Number('\''123'\'')' 
    


.. code-block:: sh
   

    $ ne 'parseInt('\''123'\'', 10)' 
    


.. code-block:: sh
   

    $ ne 'parseFloat('\''123'\'')' 
    


.. code-block:: sh
   

    $ ne 'parseInt('\''100px'\''.replace('\''px'\'', '\'''\''))' 
    


.. code-block:: sh
   

    $ ne '1 + (+ '\''22'\'')' 
    


.. code-block:: sh
   

    $ ne ''\''100'\'' | 0' 
    

perlの場合文字列を+で評価すると型を数値とする
なお、文字列の結合は.を使うので注意
また、数値でないものは0として扱われる

.. code-block:: sh
   

    $ perl -E 'say "1" + "2"'
    3
    


.. code-block:: sh
   

    $ perl -E 'say "a1a" + "2"'
    2
    


.. code-block:: sh
   

    $ ee '(prefix-numeric-value 10)' 
    
    10
    


.. code-block:: sh
   

    $ ee '(prefix-numeric-value -5)' 
    
    -5
    


.. code-block:: sh
   

    $ ee '(prefix-numeric-value 10.0)' 
    
    1
    


.. code-block:: sh
   

    $ ee '(prefix-numeric-value -5.0)' 
    
    1
    


.. code-block:: sh
   

    $ ee '(prefix-numeric-value "10")' 
    
    1
    


.. code-block:: sh
   

    $ ee '(prefix-numeric-value "asdf")' 
    
    1
    


.. code-block:: sh
   

    $ ee '(prefix-numeric-value '\''(10 20 30))' 
    
    10
    



toString.scm
====================================


.. code-block:: sh
   

    $ ee '(int-to-string 1)' 
    
    "1"
    


.. code-block:: sh
   

    $ ee '(number-to-string 1)' 
    
    "1"
    


.. code-block:: sh
   

    $ cpe 'std::ostringstream oss; oss << 12345; P(oss.str());' 
    oss.str() = 12345
    

