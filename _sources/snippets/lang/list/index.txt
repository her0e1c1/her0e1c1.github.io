
============
list
============

.. contents::
    :depth: 2



all.scm
=====================


.. code-block:: sh
   

    $ python -c 'print(all(i % 2 == 0 for i in [0,2,4]))'
    True
    


.. code-block:: sh
   

    $ he 'all even [0,2,4]' 
    True
    


.. code-block:: sh
   

    $ ee '(|--all?| (evenp it) '\''(0 2 4))' 
    Symbol's function definition is void: |--all\?|
    



any.scm
=====================


.. code-block:: sh
   

    $ python -c 'print(any(i % 2 == 0 for i in [1,2,3]))'
    True
    


.. code-block:: sh
   

    $ ee '(|--any?| (evenp it) '\''(1 2 3))' 
    Symbol's function definition is void: |--any\?|
    



append.scm
==============================


.. code-block:: sh
   

    $ python -c 'a=[1,2,3]; a.append(4); print(a)'
    [1, 2, 3, 4]
    


.. code-block:: sh
   

    $ perl -E '@a=(1, 2, 3); push @a, 4; say @a'
    1234
    


.. code-block:: sh
   

    $ ruby -e 'p [1,2,3] << 4' 
    [1, 2, 3, 4]
    


.. code-block:: sh
   

    $ ne 'a=[1,2,3]; a.push(4); console.log(a)' 
    [ 1, 2, 3, 4 ]
    


.. code-block:: sh
   

    $ cpe 'list<int> l; REP(i, 3) l.push_back(i);' 
    


.. warning::

    add-to-listは、必ず変数に対して実行する必要がある


.. code-block:: sh
   

    $ ee '(add-to-list '\''(1 2 3) 4)' 
    Wrong type argument: symbolp, (1 2 3)
    


.. code-block:: sh
   

    $ ee '(let ((a1 '\''(1 2 3))) (add-to-list '\''a1 4))' 
    
    (4 1 2 3)
    


.. code-block:: sh
   

    $ je 'List<Integer>l=new ArrayList<>(); l.add(1); P(l);' 
    [1]
    



comb.scm
========================


.. code-block:: sh
   

    $ perl -E 'say join " ", glob("{a,b,c}.{txt,csv}")'
    a.txt a.csv b.txt b.csv c.txt c.csv
    


.. code-block:: sh
   

    $ perl -E 'for $i (qw/a b c/){for(qw/txt csv/){`echo $i.$_`}}'
    


.. code-block:: sh
   

    $ zsh -c 'echo {a,b,c}.{txt,csv}' 
    a.txt a.csv b.txt b.csv c.txt c.csv
    

for backup

.. code-block:: sh
   

    $ zsh -c 'echo FILE.txt{,.bak}' 
    FILE.txt FILE.txt.bak
    



compose.scm
=================================

f g => (f (g x))

.. code-block:: sh
   

    $ s '((compose not zero?) 0)' 
    #f
    


.. code-block:: sh
   

    $ s '((compose not zero?) 1)' 
    #t
    


.. code-block:: sh
   

    $ s '((pa$ not zero?) 1)' 
    *** ERROR: wrong number of arguments for #<subr not> (required 1, got 2)
    Stack Trace:
    _______________________________________
      0  (apply fn (append args more-args))
            At line 55 of "/usr/local/share/gauche-0.9/0.9.4/lib/gauche/procedure.scm"
      1  ((pa$ not zero?) 1)
            [unknown location]
      2  (print-string (|-->| (undefined) list ((pa$ not zero?) 1)))
            [unknown location]
      3  (eval `(main+ (list ,@(cdr rest)) ,(car rest)) '())
            At line 125 of "/home/me/github/onelinerForGauche/main.scm"
    


.. code-block:: sh
   

    $ s '((pa$ flip map) (iota 10) print)' 
    0
    1
    2
    3
    4
    5
    6
    7
    8
    9
    (#<undef> #<undef> #<undef> #<undef> #<undef> #<undef> #<undef> #<undef> #<undef> #<undef>)
    


.. code-block:: sh
   

    $ s '($ p $ + 1 2 3)' 
    6
    #<undef>
    



concat.scm
==============================

末尾に要素を加える

.. code-block:: sh
   

    $ s '(begin (define a '\''(1 2)) (append! a '\''(3)))' 
    (1 2 3)
    


.. warning::

    NULLの場合は書き変わらないので注意


.. code-block:: sh
   

    $ s '(begin (define a '\''()) (append! a '\''(1)))' 
    (1)
    


.. code-block:: sh
   

    $ ee '(|-concat| '\''(1 2 3) '\''(4) '\''(5 6 7))' 
    Symbol's function definition is void: |-concat|
    


.. warning::

    need a list


.. code-block:: sh
   

    $ ee '(|-concat| '\''(1 2 3) 4 '\''(5))' 
    Symbol's function definition is void: |-concat|
    



concatMap.scm
=======================================


.. code-block:: sh
   

    $ he 'concatMap (->[a, '\'','\'']) ['\''a'\''..'\''e'\'']' 
    
    /tmp/tmp.EOW9RT5E:7:26: lexical error at character '\a'
    


.. code-block:: sh
   

    $ ee '(mapcan (lambda (x) (list x (* x x))) '\''(1 2 3))' 
    
    (1 1 2 4 3 9)
    

eval and emacs freezes (Don't eval this code!)
(mapcan (lambda (x) '(x)) '(1 2 3))



cons.scm
========================


.. code-block:: sh
   

    $ python -c 'cons=lambda a,b: [a] + b; print(cons(1, [2,3]))'
    [1, 2, 3]
    


.. code-block:: sh
   

    $ ee '(|-cons*| 1 2 3 4 5 '\''(6 7 8))' 
    Symbol's function definition is void: |-cons*|
    


.. code-block:: sh
   

    $ ee '(|-snoc| '\''(1 2 3) 4 5 6)' 
    Symbol's function definition is void: |-snoc|
    



count.scm
===========================


.. code-block:: sh
   

    $ py 'print([1,1,1,2,2,3].count(1))' 
    3
    


.. code-block:: sh
   

    $ ee '(count 1 '\''(1 1 1 2 2 3))' 
    
    3
    


.. code-block:: sh
   

    $ ee '(|--count| (evenp it) '\''(1 2 3 4 5))' 
    Symbol's function definition is void: |--count|
    


.. code-block:: sh
   

    $ py 'a=[1,1,1,1,1,1]; P(a.count(a[0])==len(a))' 
    True
    



drop.scm
========================


.. code-block:: sh
   

    $ he 'drop 1 [1,2,3]' 
    [2,3]
    


.. code-block:: sh
   

    $ ee '(|-drop| 3 '\''(1 2 3 4 5))' 
    Symbol's function definition is void: |-drop|
    


.. code-block:: sh
   

    $ ee '(|-drop| 10 '\''(1 2 3 4 5))' 
    Symbol's function definition is void: |-drop|
    


.. code-block:: sh
   

    $ ee '(|-drop| -20 '\''(1 2 3 4 5))' 
    Symbol's function definition is void: |-drop|
    



elem.scm
========================


.. code-block:: sh
   

    $ python -c 'print(1 in [1,2,3])'
    True
    


.. code-block:: sh
   

    $ ghc -e 'elem 1 [1,2,3]'
    True
    


.. code-block:: sh
   

    $ perl -E 'say 1 if 1 ~~ [1,2,3]'
    Smartmatch is experimental at -e line 1.
    1
    


.. code-block:: sh
   

    $ ee '(|-contains?| '\''(1 2 3) 1)' 
    Symbol's function definition is void: |-contains\?|
    


.. code-block:: sh
   

    $ ee '(|-contains?| '\''(1 2 3) 0)' 
    Symbol's function definition is void: |-contains\?|
    

マッチした要素以降を返す

.. code-block:: sh
   

    $ ee '(member '\''d '\''(b c d e f))' 
    
    (d e f)
    


.. code-block:: sh
   

    $ ee '(member '\''a '\''(b c d e f))' 
    
    nil
    



extend.scm
==============================


.. code-block:: sh
   

    $ ghc -e '[1,2,3] ++ [4]'
    [1,2,3,4]
    


.. code-block:: sh
   

    $ cpe 'VI a{1,2,3}, b{4,5};a.insert(a.end(), b.begin(), b.end());PE(a)' 
    1, 2, 3, 4, 5, 
    


.. code-block:: sh
   

    $ cpe 'string a("abc"), b("cd");a.insert(a.end(), b.begin(), b.end());P(a)' 
    a = abccd
    



filter.scm
==============================


.. code-block:: sh
   

    $ python -c 'print([i for i in [1,2,3,4,5] if i % 2 == 0])'
    [2, 4]
    


.. code-block:: sh
   

    $ ne '[1,2,3,4,5].filter(function(elem, index, array){return elem % 2 == 0;})' 
    


.. code-block:: sh
   

    $ perl -E 'grep{$_ eq 1} qw(1 2 3) and say 1'
    1
    


.. code-block:: sh
   

    $ perl -E 'say grep {$_ % 2 == 0} 1..5'
    24
    


.. code-block:: sh
   

    $ s '(filter #/^..$/ (glob "*"))' 
    (io op)
    


.. code-block:: sh
   

    $ s '(filter ($ not $ even? $) (i 10))' 
    (1 3 5 7 9)
    


.. code-block:: sh
   

    $ s '(filter (|.$| not even?) (i 10))' 
    (1 3 5 7 9)
    

条件に合致したら、残す

.. code-block:: sh
   

    $ ee '(|--remove| (evenp it) '\''(1 2 3 4 5))' 
    Symbol's function definition is void: |--remove|
    

条件に合致したら、除外

.. code-block:: sh
   

    $ ee '(|--filter| (evenp it) '\''(1 2 3 4 5))' 
    Symbol's function definition is void: |--filter|
    



find.scm
========================


.. code-block:: sh
   

    $ ne '[1,2,3].indexOf(1) >= 0' 
    



flatten.scm
=================================


.. code-block:: sh
   

    $ python -c 'from functools import reduce; flatten=lambda i:reduce(lambda a,b:a+(flatten(b)if hasattr(b,'__iter__')else[b]),i,[]); print(flatten([[1,2,3], 4, [5, [6], 7]]))'
    Traceback (most recent call last):
      File "<string>", line 1, in <module>
      File "<string>", line 1, in <lambda>
      File "<string>", line 1, in <lambda>
    NameError: global name '__iter__' is not defined
    


.. code-block:: sh
   

    $ ee '(|-flatten| '\''((1 2 3) 4 (5 (6) 7)))' 
    Symbol's function definition is void: |-flatten|
    



fold.scm
========================

reduceの第三引数に初期値を指定

.. code-block:: sh
   

    $ python2 -c 'print(reduce(lambda a,b: [b]+a, [1,2,3], []))'
    [3, 2, 1]
    


.. code-block:: sh
   

    $ python2 -c 'print(reduce(lambda a,b: a+b, [1,2,3]))'
    6
    


.. code-block:: sh
   

    $ ne '[1,2,3].reduce(function(a,b){return a+b;})' 
    


.. code-block:: sh
   

    $ perl -M"List::Util qw(reduce)" -E 'say reduce {$a+$b} (1,2,3)'
    6
    


.. code-block:: sh
   

    $ ghc -e 'foldl (flip (:)) [] [1,2,3]'
    [3,2,1]
    


.. code-block:: sh
   

    $ ghc -e 'foldl1 (+) [1,2,3]'
    6
    


.. code-block:: sh
   

    $ s '(fold (^ (a b) (cons a b)) '\''() (i 10))' 
    (9 8 7 6 5 4 3 2 1 0)
    


.. code-block:: sh
   

    $ ee '(|--reduce| (+ acc it) '\''(1 2 3))' 
    Symbol's function definition is void: |--reduce|
    


.. code-block:: sh
   

    $ ee '(|-reduce| '\''+ '\''(1 2 3))' 
    Symbol's function definition is void: |-reduce|
    



groupby.scm
=================================


.. code-block:: sh
   

    $ python -c 'import itertools as i; print(list(list(l) for _, l in i.groupby([1,1,1,2,2,3])))'
    [[1, 1, 1], [2, 2], [3]]
    


.. code-block:: sh
   

    $ py 'entries = [(3,1), (1,2), (2,1), (1,1),(2,3)]
    entries.sort()
    groupby = itertools.groupby(entries, key=lambda x: x[0])
    def groups():
        key, entries = groupby.next()
        for key in [1,2,3]:
            if key == key:
                yield key, entries
                try:
                    key, entries = groupby.next()
                except StopIteration:
                    continue
            else:
                yield key, []
    for key, entries in groups():
        print("%s => %s" % (key, list(entries)))' 
    1 => [(1, 1), (1, 2)]
    2 => [(2, 1), (2, 3)]
    3 => [(3, 1)]
    



head.scm
========================


.. code-block:: sh
   

    $ python -c 'print([1,2,3][0])'
    1
    


.. code-block:: sh
   

    $ php -r '$arr = array(10, 20, 30, 40, 50); echo "$arr[0]";' 
    10


.. code-block:: sh
   

    $ ee '(|-first-item| '\''(1 2 3))' 
    Symbol's function definition is void: |-first-item|
    

No error if nil

.. code-block:: sh
   

    $ ee '(car nil)' 
    
    nil
    



index.scm
===========================


.. code-block:: sh
   

    $ ee '(elt '\''(1 2 3) 0)' 
    
    1
    


.. code-block:: sh
   

    $ ee '(elt '\''(1 2 3) 1)' 
    
    2
    

範囲外の場合はnil

.. code-block:: sh
   

    $ ee '(elt '\''(1 2 3) 3)' 
    
    nil
    


.. code-block:: sh
   

    $ py 'P([1,2,3][0])' 
    1
    


.. code-block:: sh
   

    $ he '[1..3] !! 0' 
    1
    



init.scm
========================


.. code-block:: sh
   

    $ perl -E 'say qw/1 2 3/' 
    123
    


.. code-block:: sh
   

    $ zsh -c 'arr=(a b c d e)' 
    


.. warning::

    Don't insert spaces around = operator


.. code-block:: sh
   

    $ zsh -c 'arr = (a b c d e)' 
    zsh:1: number expected
    



iter.scm
========================


.. code-block:: sh
   

    $ ne 'var l=[1,2,3];for(var i=0; i<l.length; i++) P(l[i]);' 
    1
    2
    3
    


.. code-block:: sh
   

    $ cpe 'for(int i: {1,2,3}) P(i);' 
    i = 1
    i = 2
    i = 3
    


.. code-block:: sh
   

    $ cpe 'for(char ch: "abcde") P(ch);' 
    ch = a
    ch = b
    ch = c
    ch = d
    ch = e
    ch =  
    


.. warning::

    You can't use (), which is an error


.. code-block:: sh
   

    $ zsh -c 'for i in (1 2 3); do echo $i; done' 
    zsh:1: unknown file attribute:  
    


.. code-block:: sh
   

    $ zsh -c 'a=(1 2 3 4 5); for i in ${a[@]}; do echo $i; done' 
    1
    2
    3
    4
    5
    



last.scm
========================


.. code-block:: sh
   

    $ py 'print([1,2,3][-1])' 
    3
    


.. code-block:: sh
   

    $ perl -E '@a=(split " ", "a b c d e")[-1]; say @a' 
    e
    


.. code-block:: sh
   

    $ ghc -e 'last [1,2,3]'
    3
    


.. code-block:: sh
   

    $ ee '(|-last-item| '\''(1 2 3))' 
    Symbol's function definition is void: |-last-item|
    

return a list

.. code-block:: sh
   

    $ ee '(last '\''(1 2 3))' 
    
    (3)
    


.. code-block:: sh
   

    $ cpe 'vector<int>v{1,2,3}; P(v.back());' 
    v.back() = 3
    



length.scm
==============================


.. code-block:: sh
   

    $ python -c 'print(len([1,2,3]))'
    3
    


.. code-block:: sh
   

    $ he 'length [1,2,3]' 
    3
    


.. code-block:: sh
   

    $ ne '[1,2,3].length' 
    


.. code-block:: sh
   

    $ perl -E '@a=(1,2,3); say $#a+1'
    3
    


.. code-block:: sh
   

    $ perl -E '@a=(1,2,3); say scalar @a'
    3
    


.. code-block:: sh
   

    $ ce '#define SIZE(x) (sizeof(x) / sizeof(x[0]))
     int a[] = {1,2,3}; p("%d", SIZE(a));' 
    <stdin>:3:13: warning: 'SIZE' macro redefined
        #define SIZE(x) (sizeof(x) / sizeof(x[0]))
                ^
    /home/me/lib/myc.h:28:9: note: previous definition is here
    #define SIZE(x) (sizeof(x)/sizeof((x)[0]))
            ^
    1 warning generated.
    3


.. code-block:: sh
   

    $ zsh -c 'a=(a b c d e); echo $#a' 
    5
    


.. code-block:: sh
   

    $ ee '(length '\''(1 2 3))' 
    
    3
    



map.scm
=====================


.. code-block:: sh
   

    $ perl -E 'say for map {$_ + 1} 1..3' 
    2
    3
    4
    


.. code-block:: sh
   

    $ s '(map cons '\''(1 2 3) '\''(4 5 6))' 
    ((1 . 4) (2 . 5) (3 . 6))
    

１つ以上のリストを引数に取れる

.. code-block:: sh
   

    $ s '(map (lambda (x y) (+ x y)) '\''(1 2 3) '\''(4 5 6))' 
    (5 7 9)
    


.. code-block:: sh
   

    $ s '(map + (iota 5) (iota 5))' 
    (0 2 4 6 8)
    


.. code-block:: sh
   

    $ ee '(mapcar (lambda (x) (+ x 1)) '\''(1 2 3))' 
    
    (2 3 4)
    


.. code-block:: sh
   

    $ ee '(|--map| (+ 1 it) '\''(1 2 3))' 
    Symbol's function definition is void: |--map|
    


.. code-block:: c
   

    #include <stdio.h>
    // 引数に関数の型を指定(Int -> Int)
    int* map(int (* f)(int), int* list){
      int* p = list;
      while(*list){
        *list = f(*list);
        list++;
      }
      return p;
    }
    int doubleInt(int x){
      return x * x;
    }
    int main(){
      int v[] = {1, 2, 3, 0};
      int* rv = map(doubleInt, v);
      for(int* p = rv; *p; p++){
        printf("%d, ", *p);
      }
    }

.. code-block:: sh
   

    1, 4, 9, 



max.scm
=====================


.. code-block:: sh
   

    $ ee '(|-max| '\''(1 2 3 4 5))' 
    Symbol's function definition is void: |-max|
    


.. code-block:: sh
   

    $ ee '(|--max-by| (> (|-sum| it) (|-sum| other)) '\''((1 2 3) (4 5 6) (7 8 9)))' 
    Symbol's function definition is void: |--max-by|
    


.. code-block:: sh
   

    $ ce 'P("%d",MAX(1,MAX(2,3)));' 
    3



min.scm
=====================

Return the minimum value

.. code-block:: sh
   

    $ ne 'Math.min(1, 2, 3)' 
    


.. code-block:: sh
   

    $ ee '(|-min| '\''(1 2 3 4 5))' 
    Symbol's function definition is void: |-min|
    


.. code-block:: sh
   

    $ ee '(|--min-by| (> (|-sum| it) (|-sum| other)) '\''((1 2 3) (4 5 6) (7 8 9)))' 
    Symbol's function definition is void: |--min-by|
    


.. code-block:: sh
   

    $ je 'P(Math.min(1,-1));' 
    -1
    

use macro

.. code-block:: sh
   

    $ ce 'P("%d",MIN(1,-1));' 
    -1



null.scm
========================


.. code-block:: sh
   

    $ cpe 'list<int> l;P(l.empty())' 
    l.empty() = 1
    



partition.scm
=======================================



pop.scm
=====================


.. warning::

    pop_back/pop_frontの戻り値はvoid

pop from back

.. code-block:: sh
   

    $ cpe 'list<int> l{1,2,3}; while(!l.empty()){P(l.back()); l.pop_back();}' 
    l.back() = 3
    l.back() = 2
    l.back() = 1
    


.. code-block:: sh
   

    $ cpe 'list<int> l{1,2,3}; while(!l.empty()){P(l.front()); l.pop_front();}' 
    l.front() = 1
    l.front() = 2
    l.front() = 3
    



range.scm
===========================



replicate.scm
=======================================


.. code-block:: sh
   

    $ python -c 'print([1] * 3)'
    [1, 1, 1]
    


.. code-block:: sh
   

    $ python -c 'print([1,2,3] * 3)'
    [1, 2, 3, 1, 2, 3, 1, 2, 3]
    


.. code-block:: sh
   

    $ ee '(|-repeat| 3 1)' 
    Symbol's function definition is void: |-repeat|
    



reverse.scm
=================================


.. code-block:: sh
   

    $ python -c 'print("".join(reversed("hoge")))'
    egoh
    


.. code-block:: sh
   

    $ python -c 'print(list(reversed([1,2,3])))'
    [3, 2, 1]
    


.. code-block:: sh
   

    $ ghc -e 'reverse [1,2,3]'
    [3,2,1]
    


.. code-block:: sh
   

    $ ghc -e 'putStr $ reverse "hoge"'
    egoh

reverse関数に文字列として評価させたいのでscalar必要

.. code-block:: sh
   

    $ perl -E 'say scalar reverse shift' hoge
    egoh
    


.. code-block:: sh
   

    $ ee '(reverse '\''(1 2 3))' 
    
    (3 2 1)
    



destructive!
------------------------------------


.. code-block:: sh
   

    $ ee '(progn (setq a '\''(1 2 3)) (nreverse a))' 
    
    (3 2 1)
    


.. code-block:: sh
   

    $ python -c 'a=[1,2,3]; a.reverse(); print(a)'
    [3, 2, 1]
    


.. code-block:: sh
   

    $ cpe 'VIa={1,2,3}; reverse(a.begin(), a.end()); PE(a)'\''' 
    <stdin>:45:5: error: unknown type name 'VIa'; did you mean 'VI'?
        VIa={1,2,3}; reverse(a.begin(), a.end()); PE(a)'
        ^~~
        VI
    /home/me/lib/cpp/myutils.h:108:21: note: 'VI' declared here
    typedef vector<int> VI;
                        ^
    <stdin>:45:8: error: expected unqualified-id
        VIa={1,2,3}; reverse(a.begin(), a.end()); PE(a)'
           ^
    <stdin>:45:26: error: use of undeclared identifier 'a'
        VIa={1,2,3}; reverse(a.begin(), a.end()); PE(a)'
                             ^
    <stdin>:45:50: error: use of undeclared identifier 'a'
        VIa={1,2,3}; reverse(a.begin(), a.end()); PE(a)'
                                                     ^
    /home/me/lib/cpp/myutils.h:65:26: note: expanded from macro 'PE'
      {for (int i = 0 ; i < (x).size(); i++){       \
                             ^
    <stdin>:45:50: error: use of undeclared identifier 'a'
    /home/me/lib/cpp/myutils.h:66:14: note: expanded from macro 'PE'
        cout << (x)[i] << ", "; \
                 ^
    <stdin>:45:52: warning: missing terminating ' character [-Winvalid-pp-token]
        VIa={1,2,3}; reverse(a.begin(), a.end()); PE(a)'
                                                       ^
    <stdin>:45:52: error: expected expression
    1 warning and 6 errors generated.
    



slice.scm
===========================


.. code-block:: sh
   

    $ perl -E '@a=(split " ", "a b c d e")[2..4]; say @a'
    cde
    


.. code-block:: sh
   

    $ ee '(subseq '\''(1 2 3) 1)' 
    
    (2 3)
    



out of index
------------------------------------


.. code-block:: sh
   

    $ ee '(subseq '\''(1 2 3) 3)' 
    
    nil
    



minus
---------------


.. code-block:: sh
   

    $ perl -E '@a=(split " ", "a b c d e")[-1, 0]; say @a'
    ea
    


.. code-block:: sh
   

    $ ee '(subseq '\''(1 2 3) -1)' 
    
    (3)
    


.. code-block:: sh
   

    $ ee '(subseq '\''(1 2 3) -2)' 
    
    (2 3)
    


.. code-block:: sh
   

    $ ee '(subseq '\''(1 2 3) -3)' 
    
    (1 2 3)
    


.. code-block:: sh
   

    $ ee '(|-slice| '\''(1 2 3 4 5) 2 4)' 
    Symbol's function definition is void: |-slice|
    


.. code-block:: sh
   

    $ ee '(|-slice| '\''(1 2 3 4 5) 1)' 
    Symbol's function definition is void: |-slice|
    


.. code-block:: sh
   

    $ ee '(|-slice| '\''(1 2 3 4 5) -1)' 
    Symbol's function definition is void: |-slice|
    



sort.scm
========================


.. code-block:: sh
   

    $ python -c 'print(sorted([1, 4, 2, 5, 6, 7, 3]))'
    [1, 2, 3, 4, 5, 6, 7]
    


.. code-block:: sh
   

    $ perl -E '@a=qw(abc b a z);say sort(@arr);' 
    
    


.. warning::

    sort関数は、2と11の場合、11が先になる


.. code-block:: sh
   

    $ perl -E '@a=qw(11 10 1 2);say for sort @a' 
    1
    10
    11
    2
    


.. code-block:: sh
   

    $ perl -E '@a=qw(11 10 1 2); @b=sort{$a<=>$b}@a; say qq/@b/' 
    1 2 10 11
    


.. code-block:: sh
   

    $ ee '(sort '\''(1 4 2 5 6 7 3) '\''<)' 
    
    (1 2 3 4 5 6 7)
    

Sort by asc

.. code-block:: sh
   

    $ cpe 'VI v{5,2,3,4,1}; sort(v.begin(), v.end()); PE(v);' 
    1, 2, 3, 4, 5, 
    

Sort by desc (RECOMMEND)

.. code-block:: sh
   

    $ cpe 'VI v{5,2,3,4,1}; sort(v.rbegin(), v.rend()); PE(v);' 
    5, 4, 3, 2, 1, 
    


.. code-block:: sh
   

    $ cpe 'VI v{5,2,3,4,1}; sort(v.rbegin(), v.rend(), greater<int>()); PE(v);' 
    1, 2, 3, 4, 5, 
    

You can also use string as well

.. code-block:: sh
   

    $ cpe 'string s = "ebacd"; sort(ALL(s)); PE(s);' 
    a, b, c, d, e, 
    


.. code-block:: cpp
   

    #include "myutils.h"
    int main() {
      vector<pair<int, int>> v = {{1, 1}, {-2, 5}, {1, -1}, {3, 10}};
      sort(ALL(v));
      EACH(it, v)
        cout << it->first << ", " << it->second << endl;
    }

.. code-block:: sh
   

    -2, 5
    1, -1
    1, 1
    3, 10
    


.. code-block:: py
   

    def compare(a, b):
        a1, a2 = a
        b1, b2 = b
        c = cmp(a1, b1)
        if c != 0:
            return c
        else:
            return cmp(a2, b2)
    print(sorted([(2,3), (1,2), (2,1)], cmp=compare))

.. code-block:: sh
   

    [(1, 2), (2, 1), (2, 3)]
    


.. code-block:: sh
   

    $ py 'a=[(1,1),(2,0),(3,2),(1,2),(1,0)]; sorted(a,key=lambda x:(x[0],x[1]))' 
    



tail.scm
========================


.. code-block:: sh
   

    $ he 'tail [1,2,3,4,5]' 
    [2,3,4,5]
    


.. code-block:: sh
   

    $ ee '(cdr nil)' 
    
    nil
    



take.scm
========================


.. code-block:: sh
   

    $ python -c 'print([1,2,3,4,5][1:])'
    [2, 3, 4, 5]
    


.. code-block:: sh
   

    $ python -c 'print([1,2,3][1:])'
    [2, 3]
    


.. code-block:: sh
   

    $ ee '(|-take| 3 '\''(1 2 3 4 5))' 
    Symbol's function definition is void: |-take|
    



unique.scm
==============================


.. code-block:: sh
   

    $ he 'Data.List.nub [1,1,1,2,2,3]' 
    [1,2,3]
    


.. code-block:: sh
   

    $ ee '(|-distinct| '\''(1 1 1 2 2 3))' 
    Symbol's function definition is void: |-distinct|
    



zip.scm
=====================


.. code-block:: sh
   

    $ python -c 'print(list(zip(*[(1,4),(2,5),(3,6)])))'
    [(1, 2, 3), (4, 5, 6)]
    


.. code-block:: sh
   

    $ s '(zip '\''(1 2 3) '\''(4 5 6))' 
    ((1 4) (2 5) (3 6))
    


.. code-block:: sh
   

    $ ee '(|-zip| '\''(1 2 3) '\''(4 5 6))' 
    Symbol's function definition is void: |-zip|
    


.. code-block:: sh
   

    $ ee '(|-zip| '\''(1) '\''(4 5 6))' 
    Symbol's function definition is void: |-zip|
    



split 15 items to 3 groups
------------------------------------------------------------------------------


.. code-block:: sh
   

    $ py 'P(list(zip(*[iter(range(15))]*5)))' 
    [(0, 1, 2, 3, 4), (5, 6, 7, 8, 9), (10, 11, 12, 13, 14)]
    

