

io
==


=======
env.scm
=======



env
===


.. code-block:: sh
   

    $ perl -E 'say for split ":", $ENV{PATH}'
    /usr/local/heroku/bin
    /usr/local/heroku/bin
    /usr/local/heroku/bin
    /sbin
    /bin
    /usr/sbin
    /usr/bin
    /usr/games
    /usr/local/sbin
    /usr/local/bin
    /home/me/bin
    /home/me/.cask/bin
    /home/me/lib/
    /home/me/.cabal/bin
    /home/me/.cask/bin
    /home/me/lib/
    /home/me/.cabal/bin
    /home/me/.cask/bin
    /home/me/lib/
    /home/me/.cabal/bin
    


==========
option.scm
==========



options
=======

With -0 option delimiter is NULL
With -0777 you can't use any option delimiter.

.. code-block:: sh
   

    $ echo "a
    a
    a"|perl -p0777E 's/a/b/'
    b
    a
    a
    



Display warning
===============


.. code-block:: sh
   

    $ perl -we 'print @a'
    Name "main::a" used only once: possible typo at -e line 1.
    



F option
========


.. code-block:: sh
   

    $ echo "123456	b
    c	d" | perl -aF'	' -nlE 'say join(", ", map(sprintf("%5s", substr($_, 0, 5)), @F))'
    Unrecognized switch: -	  (-h will show valid options).
    


.. code-block:: sh
   

    $ ps aux | perl -anle 'print $F[1]' | head -n2
    PID
    15496
    

print 0 ~ 4 columns in the argument file

.. code-block:: sh
   

    $ echo "a,b
    c,d" |perl -F'/,s*/' -alnE 'say join "/", @F'
    a/b
    c/d
    



-00
===


.. code-block:: sh
   

    $ echo "a
    b
    
    c
    d"|perl -00 -pE 'say "-" x 20'
    --------------------
    a
    b
    
    --------------------
    c
    d
    


=============
read-line.scm
=============



diamond operator
================


.. code-block:: sh
   

    $ perl -e 'for(<*.txt>){$a=$_; s/.txt/.csv/; rename $a, $_}'
    


.. code-block:: sh
   

    $ ls |perl -E 'say reverse <>'perl -E 'say "sample.CsV" =~ /.*.csv/i'
    Bareword found where operator expected at -e line 1, near "<>perl"
    	(Missing operator before perl?)
    syntax error at -e line 2, near "<>perl
    "
    Execution of -e aborted due to compilation errors.
    


==========
random.scm
==========

Return a value between 0 and 1 (not including 1)

.. code-block:: sh
   

    $ ne 'Math.random()'
    0.4677368556149304
    

Return a value from 0 to 6

.. code-block:: sh
   

    $ ne 'Math.floor(Math.random() * 7)'
    4
    


.. code-block:: sh
   

    $ perl 'rand(10)'
    Can't open perl script "rand(10)": そのようなファイルまたはディレクトリはありません
    


.. code-block:: sh
   

    $ perl 'int(rand(10))'
    Can't open perl script "int(rand(10))": そのようなファイルまたはディレクトリはありません
    


.. code-block:: sh
   

    $ perl -E 'say rand for 1..5'
    0.236388069651188
    0.379802791725041
    0.755267302776826
    0.169408431832331
    0.38185942022854
    


=========
hello.scm
=========


.. code-block:: sh
   

    $ python -c 'print("hello world")'
    hello world
    


.. code-block:: sh
   

    $ ne '"hello world"'
    hello world
    


========
read.scm
========


========
exit.scm
========



exit
====


==========
system.scm
==========



exec
====

execute shell command. you need -i option

.. code-block:: sh
   

    $ perl -e 'system qq#sh -ic "ll /lib/libc.so.*"#'
    -r--r--r--  1 root  wheel  1567216  1月 17  2014 /lib/libc.so.7
    

System and go last

.. code-block:: sh
   

    $ perl -E 'system "echo TEST" ;say "print"'
    TEST
    print
    

コマンドを実行し、失敗した場合にのみ制御が戻る

.. code-block:: sh
   

    $ perl -E 'exec "echo 1" ;say "NOT PRINTED"'
    1
    

when you want to execute other commands, then use system

.. code-block:: sh
   

    $ perl -E 'say `echo TEST`'
    TEST
    
    


.. code-block:: sh
   

    $ perl -e 'system "echo 1" for 1..3'
    1
    1
    1
    


==========
escape.scm
==========



Don't use double quote which extend $ in sh or escape it
========================================================


.. code-block:: sh
   

    $ perl -e "$a=1; print $a"
    syntax error at -e line 1, near "="
    Execution of -e aborted due to compilation errors.
    


.. code-block:: sh
   

    $ perl -e "\$a=1; print \$a"
    1



escape quote in sh
==================


.. code-block:: sh
   

    $ perl -E 'say'\''HOGE HOGE'\'''
    HOGE HOGE
    


=========
write.scm
=========


.. code-block:: sh
   

    $ cpe 'cout << "str";'
    str


.. code-block:: sh
   

    $ cpe 'cout << flush;'
    


.. code-block:: sh
   

    $ cpe 'cout << endl;'
    
    

Don't worry about type like int, string, or bool etc.

.. code-block:: sh
   

    $ cpe 'cout << "bool: true " << true << ", false " << false << endl;'
    bool: true 1, false 0
    

