
=========
set
=========

.. contents::
    :depth: 2



find.scm
========================


.. code-block:: sh
   

    $ cpe 'char str[] = "abcde"; set<char> s(str, str + 5); P(s.find('\''b'\'') != s.end())' 
    s.find('b') != s.end() = 1
    



init.scm
========================


.. code-block:: sh
   

    $ py 'P(set([1,1,1,2,2,3]))' 
    set([1, 2, 3])
    


.. code-block:: sh
   

    $ cpe 'set<int> s; s.insert(1); s.insert(2); s.insert(3); s.insert(1); EACHP(s)' 
    *i = 1
    *i = 2
    *i = 3
    


.. code-block:: sh
   

    $ cpe 'int a[]={0,1,2,3}; set<int> s(a, a+4); EACHP(s)' 
    *i = 0
    *i = 1
    *i = 2
    *i = 3
    


.. code-block:: sh
   

    $ cpe 'string str = "abede"; set<char> s(str.begin(), str.end()); EACHP(s)' 
    *i = a
    *i = b
    *i = d
    *i = e
    


.. code-block:: sh
   

    $ zsh -c 'typeset -U s; s=(1 2 3 4 1 2); echo $s' 
    1 2 3 4
    

alias B as b

.. code-block:: sh
   

    $ zsh -c 'typeset -T b B; b=1; echo $B' 
    1
    

Dump a variable

.. code-block:: sh
   

    $ zsh -c 'typeset -A y; y=(a 1 b 2 c 3); typeset -p y' 
    typeset -A y
    y=( a 1 b 2 c 3 )
    



union.scm
===========================


.. math::
    :nowrap:

    \begin{eqnarray}
        A \cup B
    \end{eqnarray}


.. code-block:: py
   

    
    def f(A, B):
     return set(A + B)
    print(f([1,2,3,4,5], [1,3,5,7,9]))
    

.. code-block:: sh
   

    set([1, 2, 3, 4, 5, 7, 9])
    


.. code-block:: py
   

    
    def f(A, B):
     return set(A).union(B)
    print(f([1,2,3,4,5], [1,3,5,7,9]))
    

.. code-block:: sh
   

    set([1, 2, 3, 4, 5, 7, 9])
    

